#!/usr/bin/env python3
"""
Quick test script to verify database functions work with PostgreSQL
and then clean up test data.
"""

import os
import sys
from datetime import datetime
from models import Vulnerability, NewsItem, Article

# Set up PostgreSQL connection for testing
os.environ['DATABASE_URL'] = 'postgresql://postgres.inanivtnpahnihaeqdpw:sNZGQnfitefaQiGO@aws-1-us-east-2.pooler.supabase.com:6543/postgres'

def test_database_functions():
    """Test all database functions and clean up"""
    print("üß™ Testing Database Functions...")
    print("=" * 50)
    
    try:
        # Import database functions
        from db import (
            get_connection, insert_cve, insert_newsitem, insert_raw_article,
            is_article_scraped, is_article_classified, get_classified_article,
            mark_as_processed, get_cves_by_filters, get_news_by_filters
        )
        
        # Test 1: Connection
        print("1. Testing database connection...")
        conn = get_connection()
        if hasattr(conn, 'server_version'):
            print("   ‚úÖ PostgreSQL connection successful")
        else:
            print("   ‚úÖ SQLite connection successful")
        conn.close()
        
        # Test 2: Insert test CVE
        print("\n2. Testing CVE insertion...")
        test_cve = Vulnerability(
            cve_id="TEST-2025-001",
            title="Test Vulnerability",
            title_translated="Test Vulnerability",
            summary="This is a test vulnerability for database testing",
            severity="High",
            cvss_score=7.5,
            published_date=datetime.now(),
            original_language="en",
            source="test",
            url="https://test.com/cve-2025-001",
            intrigue=6.0,
            affected_products=["Test Product 1.0"]
        )
        
        insert_cve(test_cve)
        print("   ‚úÖ CVE inserted successfully")
        
        # Test 3: Insert test news item
        print("\n3. Testing news item insertion...")
        test_news = NewsItem(
            title="Test Security News",
            title_translated="Test Security News",
            summary="This is a test security news item for database testing",
            published_date=datetime.now(),
            original_language="en",
            source="test",
            url="https://test.com/news-2025-001",
            intrigue=5.5
        )
        
        insert_newsitem(test_news)
        print("   ‚úÖ News item inserted successfully")
        
        # Test 4: Insert test raw article
        print("\n4. Testing raw article insertion...")
        test_article = Article(
            id=None,  # Will be auto-generated by database
            source="test",
            url="https://test.com/article-2025-001",
            title="Test Article",
            title_translated="Test Article",
            content="This is a test article content for database testing",
            content_translated="This is a test article content for database testing",
            language="en",
            scraped_at=datetime.now(),
            published_date=datetime.now()
        )
        
        insert_raw_article(test_article)
        print("   ‚úÖ Raw article inserted successfully")
        
        # Test 5: Check if articles exist
        print("\n5. Testing article existence checks...")
        cve_exists = is_article_scraped("https://test.com/cve-2025-001")
        news_exists = is_article_classified("https://test.com/news-2025-001")
        article_exists = is_article_classified("https://test.com/article-2025-001")
        
        print(f"   CVE exists: {cve_exists}")
        print(f"   News exists: {news_exists}")
        print(f"   Article exists: {article_exists}")
        
        # Test 6: Get data with filters
        print("\n6. Testing data retrieval with filters...")
        cves = get_cves_by_filters(severity_filter=["High"], limit=10)
        news = get_news_by_filters(limit=10)
        
        print(f"   Found {len(cves)} CVEs with High severity")
        print(f"   Found {len(news)} news items")
        
        # Test 7: Mark as processed
        print("\n7. Testing mark as processed...")
        mark_as_processed("https://test.com/article-2025-001")
        print("   ‚úÖ Article marked as processed")
        
        print("\n‚úÖ All database function tests passed!")
        
    except Exception as e:
        print(f"‚ùå Test failed: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    return True

def cleanup_test_data():
    """Clean up all test data from the database"""
    print("\nüßπ Cleaning up test data...")
    print("=" * 50)
    
    try:
        from db import get_connection
        
        conn = get_connection()
        cursor = conn.cursor()
        
        # Delete test data
        test_urls = [
            "https://test.com/cve-2025-001",
            "https://test.com/news-2025-001", 
            "https://test.com/article-2025-001"
        ]
        
        deleted_count = 0
        
        for url in test_urls:
            # Delete from cves
            if hasattr(conn, 'server_version'):  # PostgreSQL
                cursor.execute("DELETE FROM cves WHERE url = %s", (url,))
            else:  # SQLite
                cursor.execute("DELETE FROM cves WHERE url = ?", (url,))
            
            # Delete from newsitems
            if hasattr(conn, 'server_version'):  # PostgreSQL
                cursor.execute("DELETE FROM newsitems WHERE url = %s", (url,))
            else:  # SQLite
                cursor.execute("DELETE FROM newsitems WHERE url = ?", (url,))
            
            # Delete from raw_articles
            if hasattr(conn, 'server_version'):  # PostgreSQL
                cursor.execute("DELETE FROM raw_articles WHERE url = %s", (url,))
            else:  # SQLite
                cursor.execute("DELETE FROM raw_articles WHERE url = ?", (url,))
            
            deleted_count += cursor.rowcount
        
        conn.commit()
        conn.close()
        
        print(f"   ‚úÖ Cleaned up {deleted_count} test entries")
        
    except Exception as e:
        print(f"‚ùå Cleanup failed: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    return True

def main():
    """Main test function"""
    print("üöÄ Database Function Test Script")
    print("=" * 50)
    
    # Run tests
    if test_database_functions():
        print("\n‚úÖ All tests completed successfully!")
    else:
        print("\n‚ùå Tests failed!")
        sys.exit(1)
    
    # Clean up
    if cleanup_test_data():
        print("\n‚úÖ Cleanup completed successfully!")
    else:
        print("\n‚ùå Cleanup failed!")
        sys.exit(1)
    
    print("\nüéâ All done! Database functions are working correctly.")

if __name__ == "__main__":
    main()
